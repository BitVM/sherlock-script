# include "stdio.h"
# include "string.h"
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned long long u64;
typedef signed int i32;
// ‚ãØ
enum : u8
{
    OP_0 = 0x00, OP_PUSHDATA1 = 0x4c, OP_PUSHDATA2, OP_PUSHDATA4, OP_1NEGATE, OP_RESERVED, OP_1, OP_2, OP_3, OP_4, OP_5, OP_6, OP_7,
    OP_8, OP_9, OP_10, OP_11, OP_12, OP_13, OP_14, OP_15, OP_16, OP_NOP, OP_VER, OP_IF, OP_NOTIF, OP_VERIF, OP_VERNOTIF, OP_ELSE,
    OP_ENDIF, OP_VERIFY, OP_RETURN, OP_TOALTSTACK, OP_FROMALTSTACK, OP_2DROP, OP_2DUP, OP_3DUP, OP_2OVER, OP_2ROT, OP_2SWAP, OP_IFDUP,
    OP_DEPTH, OP_DROP, OP_DUP, OP_NIP, OP_OVER, OP_PICK, OP_ROLL, OP_ROT, OP_SWAP, OP_TUCK, OP_CAT, OP_SUBSTR, OP_LEFT, OP_RIGHT, OP_SIZE,
    OP_INVERT, OP_AND, OP_OR, OP_XOR, OP_EQUAL, OP_EQUALVERIFY, OP_RESERVED1, OP_RESERVED2, OP_1ADD, OP_1SUB, OP_2MUL, OP_2DIV, OP_NEGATE,
    OP_ABS, OP_NOT, OP_0NOTEQUAL, OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_MOD, OP_LSHIFT, OP_RSHIFT, OP_BOOLAND, OP_BOOLOR, OP_NUMEQUAL,
    OP_NUMEQUALVERIFY, OP_NUMNOTEQUAL, OP_LESSTHAN, OP_GREATERTHAN, OP_LESSTHANOREQUAL, OP_GREATERTHANOREQUAL, OP_MIN, OP_MAX, OP_WITHIN,
    OP_RIPEMD160, OP_SHA1, OP_SHA256, OP_HASH160, OP_HASH256, OP_CODESEPARATOR, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKMULTISIG,
    OP_CHECKMULTISIGVERIFY, OP_NOP1, OP_NOP2, OP_NOP3, OP_NOP4, OP_NOP5, OP_NOP6, OP_NOP7, OP_NOP8, OP_NOP9, OP_NOP10, OP_CHECKSIGADD
}
script [4096] = { [0 ... 4095] = OP_NOP }; // bitcoin script
u16 pc = 0; // program counter
struct
{
	i32 integer;
	i32 reference;
}
const‚Å∫ [64] = { [0 ... 63].integer = 0, [0 ... 63].reference = 0 };
// ‚ãØ
enum : u16 { x‚ÇÄ, x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, x‚ÇÖ, x‚ÇÜ, x‚Çá, x‚Çà, x‚Çâ, x‚ÇÅ‚ÇÄ, x‚ÇÅ‚ÇÅ, x‚ÇÅ‚ÇÇ, x‚ÇÅ‚ÇÉ, x‚ÇÅ‚ÇÑ, x‚ÇÅ‚ÇÖ, x‚ÇÅ‚ÇÜ, x‚ÇÅ‚Çá, x‚ÇÅ‚Çà, x‚ÇÅ‚Çâ, x‚ÇÇ‚ÇÄ, x‚ÇÇ‚ÇÅ, x‚ÇÇ‚ÇÇ, x‚ÇÇ‚ÇÉ };
struct
{
    u8 opcode;
    u8 reference;
    u16 operand_0;
    u16 operand_1;
    u16 operand_2;
}
trace [4096] = { [x‚ÇÄ ... x‚ÇÇ‚ÇÉ].reference = 1, [x‚ÇÄ ... x‚ÇÇ‚ÇÉ].opcode = OP_RESERVED, [x‚ÇÇ‚ÇÉ + 1 ... 4095].opcode = OP_NOP };
u16 √∂p = x‚ÇÇ‚ÇÉ + 1;
// ‚ãØ
u16 stack‚Åª [16] [1024] = { x‚ÇÇ‚ÇÉ, x‚ÇÇ‚ÇÇ, x‚ÇÇ‚ÇÅ, x‚ÇÇ‚ÇÄ, x‚ÇÅ‚Çâ, x‚ÇÅ‚Çà, x‚ÇÅ‚Çá, x‚ÇÅ‚ÇÜ, x‚ÇÅ‚ÇÖ, x‚ÇÅ‚ÇÑ, x‚ÇÅ‚ÇÉ, x‚ÇÅ‚ÇÇ, x‚ÇÅ‚ÇÅ, x‚ÇÅ‚ÇÄ, x‚Çâ, x‚Çà, x‚Çá, x‚ÇÜ, x‚ÇÖ, x‚ÇÑ, x‚ÇÉ, x‚ÇÇ, x‚ÇÅ, x‚ÇÄ };
u16 fp‚Åª = 0, ap [16], ap‚Åª = x‚ÇÇ‚ÇÉ + 1 - x‚ÇÄ;
// ‚ãØ
u16 stack‚Å∫ [1024] = { x‚ÇÇ‚ÇÉ, x‚ÇÇ‚ÇÇ, x‚ÇÇ‚ÇÅ, x‚ÇÇ‚ÇÄ, x‚ÇÅ‚Çâ, x‚ÇÅ‚Çà, x‚ÇÅ‚Çá, x‚ÇÅ‚ÇÜ, x‚ÇÅ‚ÇÖ, x‚ÇÅ‚ÇÑ, x‚ÇÅ‚ÇÉ, x‚ÇÅ‚ÇÇ, x‚ÇÅ‚ÇÅ, x‚ÇÅ‚ÇÄ, x‚Çâ, x‚Çà, x‚Çá, x‚ÇÜ, x‚ÇÖ, x‚ÇÑ, x‚ÇÉ, x‚ÇÇ, x‚ÇÅ, x‚ÇÄ };
u16 ap‚Å∫ = x‚ÇÇ‚ÇÉ + 1 - x‚ÇÄ;
// ‚ãØ
void preprocess (const u8 * data,  u16 size)
{
	u8 opcode = OP_NOP;
	// CONSTANT PREPROCESS
	for (u8 cc = 0; size --> 0; ) switch (opcode = * data ++)
	{
		case OP_0:
			script [pc ++] = OP_0;
			continue;
		case 1: // 8-bit
			const‚Å∫ [cc].integer = * data ++;
			// TODO: Check for duplication
			script [pc ++] = cc ++ | 0xC0;
			continue;
		case 2: // 16-bit
			const‚Å∫ [cc].integer = script [pc ++];
			const‚Å∫ [cc].integer |= script [pc ++] << 8;
			// TODO: Check for duplication
			script [pc ++] = cc ++ | 0xC0;
			continue;
		case 3: // 24-bit
			const‚Å∫ [cc].integer = script [pc ++];
			const‚Å∫ [cc].integer |= script [pc ++] << 8;
			const‚Å∫ [cc].integer |= script [pc ++] << 16;
			// TODO: Check for duplication
			script [pc ++] = cc ++ | 0xC0;
			continue;
		case 4: // 32-bit
			const‚Å∫ [cc].integer = script [pc ++];
			const‚Å∫ [cc].integer |= script [pc ++] << 8;
			const‚Å∫ [cc].integer |= script [pc ++] << 16;
			const‚Å∫ [cc].integer |= script [pc ++] << 24;
			// TODO: Check for duplication
			script [pc ++] = cc ++ | 0xC0;
			continue;
		default: // ‚ãØ
			script [pc ++] = opcode;
			continue;
	}
	// REVERSED EXECUTION
	while (pc --> 0) switch (opcode = script [pc])
	{
		case OP_0:
		{
			u16 ùüò = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			trace [ùüò].opcode = OP_0;
			continue;
		}
		// ‚ãØ
		// OP_PUSHDATA1
		// OP_PUSHDATA2
		// OP_PUSHDATA4
		// OP_1NEGATE
		// OP_RESERVED
		case OP_1:
		case OP_2:
		case OP_3:
		case OP_4:
		case OP_5:
		case OP_6:
		case OP_7:
		case OP_8:
		case OP_9:
		case OP_10:
		case OP_11:
		case OP_12:
		case OP_13:
		case OP_14:
		case OP_15:
		case OP_16:
		{
			u16 ùüôùüû = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			trace [ùüôùüû].opcode = opcode;
			continue;
		}
		// OP_NOP
		// OP_VER
		case OP_IF:
		{
			for (u16 _ = 0; _ < ap‚Åª; ++ _)
			{
				u16 A‚ÇÅ = stack‚Åª [fp‚Åª] [_];
				u16 A‚ÇÄ = stack‚Åª [fp‚Åª] [_ - 1];
				if (A‚ÇÄ == A‚ÇÅ) continue;
				u16 Ôºü = √∂p ++;
				trace [Ôºü].opcode = OP_IF;
				trace [Ôºü].operand_0 = √∂p;
				trace [Ôºü].operand_1 = A‚ÇÅ;
				trace [Ôºü].operand_2 = A‚ÇÄ;
				trace [√∂p ++].reference = 1;
				++ trace [A‚ÇÄ].reference;
				++ trace [A‚ÇÅ].reference;
			}
			if (ap‚Åª != ap [-- fp‚Åª])
			; // WARNING
			continue;
		}
		// OP_NOTIF
		// OP_VERIF
		// OP_VERNOTIF
		case OP_ELSE:
		{
			u16 ap‚ÇÄ = ap [fp‚Åª - 1];
			ap [fp‚Åª - 1] = ap‚Åª, ap‚Åª = ap‚ÇÄ;
			memcpy (stack‚Åª [fp‚Åª + 1], stack‚Åª [fp‚Åª - 1], sizeof stack‚Åª [fp‚Åª]);
			memcpy (stack‚Åª [fp‚Åª - 1], stack‚Åª [fp‚Åª], sizeof stack‚Åª [fp‚Åª]);
			memcpy (stack‚Åª [fp‚Åª], stack‚Åª [fp‚Åª + 1], sizeof stack‚Åª [fp‚Åª]);
			continue;
		}
		case OP_ENDIF:
		{
			ap [fp‚Åª ++] = ap‚Åª;
			memcpy (stack‚Åª [fp‚Åª], stack‚Åª [fp‚Åª - 1], sizeof stack‚Åª [fp‚Åª]);
			continue;
		}
		// OP_VERIFY
		// OP_RETURN
		// OP_TOALTSTACK
		// OP_FROMALTSTACK
		// OP_2DROP
		// OP_2DUP
		// OP_3DUP
		// OP_2OVER
		// OP_2ROT
		// OP_2SWAP
		// OP_IFDUP
		// OP_DEPTH
		case OP_DROP:
		{
			stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			continue;
		}
		case OP_DUP:
		{
			u16 A‚ÇÅ = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A‚ÇÄ = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			stack‚Åª [fp‚Åª] [ap‚Åª ++] = A‚ÇÄ; // A‚ÇÄ == A‚ÇÅ
			continue;
		}
		case OP_NIP:
		{
			u16 A = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			stack‚Åª [fp‚Åª] [ap‚Åª ++] = A;
			continue;
		}
		case OP_OVER:
		{
			u16 A = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			stack‚Åª [fp‚Åª] [ap‚Åª - 2] = A;
			continue;
		}
		case OP_PICK:
		{
			u16 const‚Åª = script [-- pc];
			u16 A‚Å∫ = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 N‚Å∫ = const‚Åª && const‚Åª <= OP_16 ? const‚Åª - OP_RESERVED : const‚Åª >= 0xC0 ? const‚Å∫ [const‚Åª - 0xC0].integer : 0;
			stack‚Åª [fp‚Åª] [ap‚Åª - N‚Å∫ - 1] = A‚Å∫;
			continue;
		}
		case OP_ROLL:
		{
			u16 const‚Åª = script [-- pc];
			u16 A‚Å∫ = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 N‚Å∫ = const‚Åª && const‚Åª <= OP_16 ? const‚Åª - OP_RESERVED : const‚Åª >= 0xC0 ? const‚Å∫ [const‚Åª - 0xC0].integer : 0;
			memmove (stack‚Åª [fp‚Åª] + ap‚Åª - N‚Å∫, stack‚Åª [fp‚Åª] + ap‚Åª - N‚Å∫ - 1, N‚Å∫ * sizeof stack‚Åª [fp‚Åª] [ap‚Åª]);
			stack‚Åª [fp‚Åª] [ap‚Åª - N‚Å∫ - 1] = A‚Å∫;
		}
		case OP_ROT:
		{
			u16 A = stack‚Åª [fp‚Åª] [ap‚Åª - 1];
			stack‚Åª [fp‚Åª] [ap‚Åª - 1] = stack‚Åª [fp‚Åª] [ap‚Åª - 2];
			stack‚Åª [fp‚Åª] [ap‚Åª - 2] = stack‚Åª [fp‚Åª] [ap‚Åª - 3];
			stack‚Åª [fp‚Åª] [ap‚Åª - 3] = A;
			continue;
		}
		case OP_SWAP:
		{
			u16 A = stack‚Åª [fp‚Åª] [ap‚Åª - 1];
			stack‚Åª [fp‚Åª] [ap‚Åª - 1] = stack‚Åª [fp‚Åª] [ap‚Åª - 2];
			stack‚Åª [fp‚Åª] [ap‚Åª - 2] = A;
			continue;
		}
		case OP_TUCK:
		{
			stack‚Åª [fp‚Åª] [ap‚Åª - 3] = stack‚Åª [fp‚Åª] [ap‚Åª - 2];
			stack‚Åª [fp‚Åª] [ap‚Åª - 2] = stack‚Åª [fp‚Åª] [ap‚Åª - 1];
			-- ap‚Åª;
			continue;
		}
		// OP_CAT
		// OP_SUBSTR
		// OP_LEFT
		// OP_RIGHT
		// OP_SIZE
		// OP_INVERT
		// OP_AND
		// OP_OR
		// OP_XOR
		case OP_EQUAL:
		{
			u16 AÔºùB = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A = trace [AÔºùB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºùB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºùB].opcode = OP_EQUAL;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		// OP_EQUALVERIFY
		// OP_RESERVED1
		// OP_RESERVED2
		case OP_1ADD:
		{
			u16 AÔºã1 = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A = trace [AÔºã1].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºã1].opcode = OP_1ADD;
			trace [A].reference = 1;
			continue;
		}
		case OP_1SUB:
		{
			u16 AÔºç1 = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A = trace [AÔºç1].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºç1].opcode = OP_1ADD;
			trace [A].reference = 1;
			continue;
		}
		// OP_2MUL
		// OP_2DIV
		// OP_NEGATE
		// OP_ABS
		// OP_NOT
		// OP_0NOTEQUAL
		case OP_ADD:
		{
			u16 AÔºãB = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A = trace [AÔºãB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºãB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºãB].opcode = OP_ADD;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		case OP_SUB:
		{
			u16 AÔºçB = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			u16 A = trace [AÔºçB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºçB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºçB].opcode = OP_SUB;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		// OP_MUL
		// OP_DIV
		// OP_MOD
		// OP_LSHIFT
		// OP_RSHIFT
		case OP_BOOLAND:
		{
			u16 AÔºÜB = stack‚Åª [fp‚Åª] [-- ap‚Åª];	
			u16 A = trace [AÔºÜB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºÜB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºÜB].opcode = OP_BOOLAND;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		// OP_BOOLOR
		// OP_NUMEQUAL
		// OP_NUMEQUALVERIFY
		// OP_NUMNOTEQUAL
		case OP_LESSTHAN:
		{
			u16 AÔºúB = stack‚Åª [fp‚Åª] [-- ap‚Åª];	
			u16 A = trace [AÔºúB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºúB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºúB].opcode = OP_LESSTHAN;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		case OP_GREATERTHAN:
		{
			u16 AÔºûB = stack‚Åª [fp‚Åª] [-- ap‚Åª];	
			u16 A = trace [AÔºûB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºûB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºûB].opcode = OP_GREATERTHAN;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		case OP_LESSTHANOREQUAL:
		{
			u16 AÔºúB·µí ≥AÔºùB = stack‚Åª [fp‚Åª] [-- ap‚Åª];	
			u16 A = trace [AÔºúB·µí ≥AÔºùB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºúB·µí ≥AÔºùB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºúB·µí ≥AÔºùB].opcode = OP_LESSTHANOREQUAL;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		case OP_GREATERTHANOREQUAL:
		{
			u16 AÔºûB·µí ≥AÔºùB = stack‚Åª [fp‚Åª] [-- ap‚Åª];	
			u16 A = trace [AÔºûB·µí ≥AÔºùB].operand_0 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			u16 B = trace [AÔºûB·µí ≥AÔºùB].operand_1 = stack‚Åª [fp‚Åª] [ap‚Åª ++] = √∂p ++;
			trace [AÔºûB·µí ≥AÔºùB].opcode = OP_GREATERTHANOREQUAL;
			trace [A].reference = 1;
			trace [B].reference = 1;
			continue;
		}
		// OP_MIN
		// OP_MAX
		// OP_WITHIN
		// OP_RIPEMD160
		// OP_SHA1
		// OP_SHA256
		// OP_HASH160
		// OP_HASH256
		// OP_CODESEPARATOR
		// OP_CHECKSIG
		// OP_CHECKSIGVERIFY
		// OP_CHECKMULTISIG
		// OP_CHECKMULTISIGVERIFY
		// OP_NOP1
		// OP_NOP2
		// OP_NOP3
		// OP_NOP4
		// OP_NOP5
		// OP_NOP6
		// OP_NOP7
		// OP_NOP8
		// OP_NOP9
		// OP_NOP10
		// OP_CHECKSIGADD
		// ‚ãØ
		default:
		{
			if (opcode < 0xC0) continue; // WARNING
			u16 _ = stack‚Åª [fp‚Åª] [-- ap‚Åª];
			trace [_].opcode = opcode;
			continue;
		}
	}
	// UNLOCK INPUT
	for (; stack‚Åª [fp‚Åª] [ap‚Å∫] == x‚ÇÇ‚ÇÉ - ap‚Å∫; ++ ap‚Å∫);
	for (ap‚Å∫ = 0; ap‚Å∫ <= x‚ÇÇ‚ÇÉ - ap‚Åª; ++ ap‚Å∫) stack‚Å∫ [ap‚Å∫] = stack‚Åª [fp‚Åª] [ap‚Å∫];
}
// ‚ãØ
void serialize (u16 x·µ¢)
{
	for (u16 n = 0; n < ap‚Å∫; ++ n) if (stack‚Å∫ [n] == x·µ¢)
	{
		if (trace [x·µ¢].reference == 0) return; // WARNING
		if (0 <-- trace [x·µ¢].reference) switch (ap‚Å∫ - n - 1)
		{
			case 0:
			{
				u16 x‚ÇÄ = stack‚Å∫ [-- ap‚Å∫] = x·µ¢;
				stack‚Å∫ [ap‚Å∫ ++] = x‚ÇÄ;
				stack‚Å∫ [ap‚Å∫ ++] = x‚ÇÄ;
				puts ("OP_DUP"); // fwrite (& OP_DUP, 1, 1, stdout)
				return;
			}
			case 1:
			{
				u16 x‚ÇÄ = stack‚Å∫ [-- ap‚Å∫];
				u16 x‚ÇÅ = stack‚Å∫ [-- ap‚Å∫] = x·µ¢;
				stack‚Å∫ [ap‚Å∫ ++] = x‚ÇÅ;
				stack‚Å∫ [ap‚Å∫ ++] = x‚ÇÄ;
				stack‚Å∫ [ap‚Å∫ ++] = x‚ÇÅ;
				puts ("OP_OVER"); // fwrite (& OP_OVER, 1, 1, stdout)
				return;
			}
			default:
			{
				u16 x‚Çô = stack‚Å∫ [ap‚Å∫ - n - 1] = x·µ¢;
				stack‚Å∫ [ap‚Å∫ ++] = x‚Çô;
				printf ("%hu OP_PICK\n", n); // fwrite (& OP_PICK, 1, 1, stdout)
				return;
			}
		}
		else switch (ap‚Å∫ - n - 1)
		{
			case 0: return;
			case 1:
			{
				u16 tmp = stack‚Å∫ [ap‚Å∫ - 2];
				stack‚Å∫ [ap‚Å∫ - 2] = stack‚Å∫ [ap‚Å∫ - 1];
				stack‚Å∫ [ap‚Å∫ - 1] = tmp = x·µ¢;
				puts ("OP_SWAP"); // fwrite (& OP_SWAP, 1, 1, stdout)
				return;
			}
			case 2:
			{
				u16 tmp = stack‚Å∫ [ap‚Å∫ - 3];
				stack‚Å∫ [ap‚Å∫ - 3] = stack‚Å∫ [ap‚Å∫ - 2];
				stack‚Å∫ [ap‚Å∫ - 2] = stack‚Å∫ [ap‚Å∫ - 1];
				stack‚Å∫ [ap‚Å∫ - 1] = tmp = x·µ¢;
				puts ("OP_ROT"); // fwrite (& OP_ROT, 1, 1, stdout)
				return;
			}
			default:
			{
				u16 tmp = stack‚Å∫ [ap‚Å∫ - n - 1];
				stack‚Å∫ [ap‚Å∫ - n - 1] = stack‚Å∫ [ap‚Å∫ - n];
				stack‚Å∫ [ap‚Å∫ - 3] = stack‚Å∫ [ap‚Å∫ - 2];
				stack‚Å∫ [ap‚Å∫ - 2] = stack‚Å∫ [ap‚Å∫ - 1];
				stack‚Å∫ [ap‚Å∫ - 1] = tmp = x·µ¢;
				printf ("%hu OP_ROLL\n", n); // fwrite (& OP_ROLL, 1, 1, stdout)
				return;
			}
		}
	}
	// RECURSIVE SERIALIZE
	switch (trace [x·µ¢].opcode)
	{
		case OP_0:
			puts ("0"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// ‚ãØ
		// OP_PUSHDATA1
		// OP_PUSHDATA2
		// OP_PUSHDATA4
		case OP_1NEGATE:
			puts ("-1"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_RESERVED
		case OP_1:
		case OP_2:
		case OP_3:
		case OP_4:
		case OP_5:
		case OP_6:
		case OP_7:
		case OP_8:
		case OP_9:
		case OP_10:
		case OP_11:
		case OP_12:
		case OP_13:
		case OP_14:
		case OP_15:
		case OP_16:
			printf ("%i\n", trace [x·µ¢].opcode - OP_RESERVED); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		case OP_NOP:
			puts ("OP_NOP");
			return;
		// OP_VER
		case OP_IF:
			serialize (trace [x·µ¢].operand_1);
			serialize (trace [x·µ¢].operand_2);
			serialize (trace [x·µ¢].operand_0);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts ("OP_IF OP_NIP OP_ELSE OP_DROP OP_ENDIF");
			// u8 Ôºü [ ] = { OP_IF, OP_NIP, OP_ELSE, OP_DROP, OP_ENDIF }
			// fwrite (Ôºü, 1, sizeof Ôºü, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_NOTIF
		// OP_VERIF
		// OP_VERNOTIF
		// OP_ELSE
		// OP_ENDIF
		// OP_VERIFY
		// OP_RETURN
		// OP_TOALTSTACK
		// OP_FROMALTSTACK
		// OP_2DROP
		// OP_2DUP
		// OP_3DUP
		// OP_2OVER
		// OP_2ROT
		// OP_2SWAP
		// OP_IFDUP
		// OP_DEPTH
		// OP_DROP
		// OP_DUP
		// OP_NIP
		// OP_OVER
		// OP_PICK
		// OP_ROLL
		// OP_ROT
		// OP_SWAP
		// OP_TUCK
		// OP_CAT
		// OP_SUBSTR
		// OP_LEFT
		// OP_RIGHT
		// OP_SIZE
		// OP_INVERT
		// OP_AND
		// OP_OR
		// OP_XOR
		case OP_EQUAL:
			serialize (trace [x·µ¢].operand_0);
			serialize (trace [x·µ¢].operand_1);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_1;
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts ("OP_EQUAL"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_EQUALVERIFY
		// OP_RESERVED1
		// OP_RESERVED2
		case OP_1ADD:
		case OP_1SUB:
			serialize (trace [x·µ¢].operand_0);
			stack‚Å∫ [ap‚Å∫ - 1] = trace [x·µ¢].operand_0;
			puts (trace [x·µ¢].opcode == OP_1ADD ? "OP_1ADD" : "OP_1SUB"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ - 1] = x·µ¢);
		// OP_2MUL
		// OP_2DIV
		// OP_NEGATE
		// OP_ABS
		// OP_NOT
		// OP_0NOTEQUAL
		case OP_ADD:
		case OP_SUB:
			serialize (trace [x·µ¢].operand_0);
			serialize (trace [x·µ¢].operand_1);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_1;
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts (trace [x·µ¢].opcode == OP_ADD ? "OP_ADD" : "OP_SUB"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_MUL
		// OP_DIV
		// OP_MOD
		// OP_LSHIFT
		// OP_RSHIFT
		case OP_BOOLAND:
			serialize (trace [x·µ¢].operand_0);
			serialize (trace [x·µ¢].operand_1);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_1;
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts ("OP_BOOLAND"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_BOOLOR
		// OP_NUMEQUAL
		// OP_NUMEQUALVERIFY
		// OP_NUMNOTEQUAL
		case OP_LESSTHAN:
		case OP_GREATERTHAN:
			serialize (trace [x·µ¢].operand_0);
			serialize (trace [x·µ¢].operand_1);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_1;
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts (trace [x·µ¢].opcode == OP_LESSTHAN ? "OP_LESSTHAN" : "OP_GREATERTHAN"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		case OP_LESSTHANOREQUAL:
		case OP_GREATERTHANOREQUAL:
			serialize (trace [x·µ¢].operand_0);
			serialize (trace [x·µ¢].operand_1);
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_1;
			stack‚Å∫ [-- ap‚Å∫] = trace [x·µ¢].operand_0;
			puts (trace [x·µ¢].opcode == OP_LESSTHANOREQUAL ? "OP_LESSTHANOREQUAL" : "OP_GREATERTHANOREQUAL"); // fwrite (& trace [x·µ¢].opcode, 1, 1, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
		// OP_MIN
		// OP_MAX
		// OP_WITHIN
		// OP_RIPEMD160
		// OP_SHA1
		// OP_SHA256
		// OP_HASH160
		// OP_HASH256
		// OP_CODESEPARATOR
		// OP_CHECKSIG
		// OP_CHECKSIGVERIFY
		// OP_CHECKMULTISIG
		// OP_CHECKMULTISIGVERIFY
		// OP_NOP1
		// OP_NOP2
		// OP_NOP3
		// OP_NOP4
		// OP_NOP5
		// OP_NOP6
		// OP_NOP7
		// OP_NOP8
		// OP_NOP9
		// OP_NOP10
		// OP_CHECKSIGADD
		default:
			if (trace [x·µ¢].opcode < 0xC0) return; // WARNING
			i32 const‚Åª = const‚Å∫ [trace [x·µ¢].opcode - 0xC0].integer;
			printf ("%i\n", const‚Åª); // fwrite (& const‚Åª, 1, __builtin_clz (const‚Åª) / 8, stdout)
			return serialize (stack‚Å∫ [ap‚Å∫ ++] = x·µ¢);
	}
}
